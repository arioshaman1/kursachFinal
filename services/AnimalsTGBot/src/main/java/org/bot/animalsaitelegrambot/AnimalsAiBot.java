package org.bot.animalsaitelegrambot;

import org.bot.animalsaitelegrambot.config.BotConfig;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.springframework.core.io.ByteArrayResource;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class AnimalsAiBot extends TelegramLongPollingBot {

    private enum DetectionMode {
        CAT_DOG, YOLO, LLAMA
    }

    private final BotConfig config;
    private final RestTemplate restTemplate;
    private DetectionMode currentMode;

    public AnimalsAiBot(BotConfig config, RestTemplate restTemplate) {
        super(config.getToken());
        this.config = config;
        this.restTemplate = restTemplate;
    }

    @Override
    public String getBotUsername() {
        return config.getName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                if (update.getMessage().hasText()) {
                    handleTextMessage(update);
                } else if (update.getMessage().hasPhoto()) {
                    handlePhotoMessage(update);
                }
            }
        } catch (Exception e) {
            sendErrorMessage(update.getMessage().getChatId(), "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void handleTextMessage(Update update) throws TelegramApiException {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        switch (messageText) {
            case "/start":
                sendModeSelectionKeyboard(chatId);
                break;
            case "üê±üê∂ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—à–∫—É/—Å–æ–±–∞–∫—É":
                currentMode = DetectionMode.CAT_DOG;
                sendMessage(chatId, "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.");
                break;
            case "üñº YOLO –∞–Ω–∞–ª–∏–∑":
                currentMode = DetectionMode.YOLO;
                sendMessage(chatId, "–í—ã–±—Ä–∞–Ω YOLO —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.");
                break;
            case "üí¨ –ß–∞—Ç —Å Llama 4":
                currentMode = DetectionMode.LLAMA;
                sendMessage(chatId, "–†–µ–∂–∏–º —á–∞—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.");
                break;
            default:
                if (currentMode == DetectionMode.LLAMA) {
                    String response = askLlama(messageText, chatId);  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                    sendMessage(chatId, response);
                } else {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –º–µ–Ω—é");
                }
        }
    }
    private String askLlama(String userMessage, long chatId) {
        try {
            String apiUrl = config.llamaApiUrl();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

            // –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
            JSONObject requestBody = new JSONObject();
            requestBody.put("message", userMessage);
            requestBody.put("chat_id", chatId);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
            HttpEntity<String> request = new HttpEntity<>(requestBody.toString(), headers);
            ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            JSONObject jsonResponse = new JSONObject(response.getBody());
            if (jsonResponse.getString("status").equals("success")) {
                return jsonResponse.getString("response");
            } else {
                return "–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: " + jsonResponse.optString("error", "Unknown error");
            }

        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: " + e.getMessage();
        }
    }
    private String formatYoloResponse(String jsonResponse) {
        try {
            JSONObject json = new JSONObject(jsonResponse);
            StringBuilder result = new StringBuilder("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–∞ detections
            if (json.has("detections")) {
                JSONArray detections = json.getJSONArray("detections");

                if (detections.length() == 0) {
                    return result.append("‚ÑπÔ∏è –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤\n")
                            .append("–§–∞–π–ª: ").append(json.optString("filename", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
                            .append("\n–¢–∏–ø: ").append(json.optString("media_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
                            .toString();
                }

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                Map<String, Integer> objectCounts = new HashMap<>();
                for (int i = 0; i < detections.length(); i++) {
                    JSONObject det = detections.getJSONObject(i);
                    String objClass = det.optString("class", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç");
                    objectCounts.put(objClass, objectCounts.getOrDefault(objClass, 0) + 1);
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
                result.append("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ").append(detections.length()).append("\n\n")
                        .append("–°–æ—Å—Ç–∞–≤ –æ–±—ä–µ–∫—Ç–æ–≤:\n");

                objectCounts.forEach((cls, count) ->
                        result.append("‚Ä¢ ").append(cls).append(": ").append(count).append("\n"));

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
                result.append("\nüîé –î–µ—Ç–∞–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:\n");
                for (int i = 0; i < detections.length(); i++) {
                    JSONObject det = detections.getJSONObject(i);
                    result.append("\n").append(i+1).append(". ")
                            .append(det.optString("class", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç")).append("\n")
                            .append("   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ")
                            .append(String.format("%.1f", det.optDouble("confidence", 0)*100))
                            .append("%\n");

                    if (det.has("bbox")) {
                        JSONObject bbox = det.getJSONObject("bbox");
                        result.append("   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [")
                                .append(String.format("%.0f", bbox.optDouble("x1", 0))).append(",")
                                .append(String.format("%.0f", bbox.optDouble("y1", 0))).append("]-[")
                                .append(String.format("%.0f", bbox.optDouble("x2", 0))).append(",")
                                .append(String.format("%.0f", bbox.optDouble("y2", 0))).append("]\n")
                                .append("   –†–∞–∑–º–µ—Ä: ")
                                .append(String.format("%.0f", bbox.optDouble("x2", 0)-bbox.optDouble("x1", 0)))
                                .append("x")
                                .append(String.format("%.0f", bbox.optDouble("y2", 0)-bbox.optDouble("y1", 0)));
                    }
                }

                return result.toString();
            }

            return result.append("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è—Ö\n")
                    .append("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n")
                    .append(json.toString(2))
                    .toString();

        } catch (Exception e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage()
                    + "\n\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n"
                    + jsonResponse;
        }
    }
    private String sendPhotoToApi(byte[] photoBytes, String apiUrl) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            ByteArrayResource resource = new ByteArrayResource(photoBytes) {
                @Override
                public String getFilename() {
                    return "animal_photo.jpg";
                }
            };

            // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", resource);

            HttpEntity<MultiValueMap<String, Object>> requestEntity =
                    new HttpEntity<>(body, headers);

            // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            ResponseEntity<String> response = restTemplate.postForEntity(
                    apiUrl,
                    requestEntity,
                    String.class
            );

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            if (response.getStatusCode() != HttpStatus.OK) {
                throw new RuntimeException("API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: " + response.getStatusCode());
            }

            return response.getBody();

        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –Ω–∞ API: " + e.getMessage(), e);
        }
    }
    private String formatCatDogResponse(String jsonResponse) {
        try {
            JSONObject json = new JSONObject(jsonResponse);
            StringBuilder result = new StringBuilder("üêæ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n\n");

            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (label + probability)
            if (json.has("label") && json.has("probability")) {
                String label = json.getString("label");
                double probability = json.getDouble("probability") * 100;

                String emoji = label.equalsIgnoreCase("cat") ? "üê±" : "üê∂";
                String animalName = label.equalsIgnoreCase("cat") ? "–∫–æ—à–∫–∞" : "—Å–æ–±–∞–∫–∞";

                result.append("–ñ–∏–≤–æ—Ç–Ω–æ–µ: ").append(animalName).append(" ").append(emoji).append("\n")
                        .append("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ").append(String.format("%.1f", probability)).append("%");

                return result.toString();
            }
            // –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (class + confidence)
            else if (json.has("class") && json.has("confidence")) {
                String animalClass = json.getString("class");
                double confidence = json.getDouble("confidence") * 100;

                return String.format(
                        "–ñ–∏–≤–æ—Ç–Ω–æ–µ: %s\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.1f%%",
                        animalClass.equals("cat") ? "–∫–æ—à–∫–∞ üê±" : "—Å–æ–±–∞–∫–∞ üê∂",
                        confidence
                );
            }
            else if (json.has("prediction")) {
                return "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + json.getString("prediction");
            }
            else {
                return "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n"
                        + "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + json.toString();
            }

        } catch (Exception e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n"
                    + e.getMessage()
                    + "\n\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n"
                    + jsonResponse;
        }
    }

    private void handlePhotoMessage(Update update) throws TelegramApiException {
        if (currentMode == null) {
            sendMessage(update.getMessage().getChatId(), "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –º–µ–Ω—é");
            return;
        }

        long chatId = update.getMessage().getChatId();
        String fileId = update.getMessage().getPhoto().get(0).getFileId();

        sendMessage(chatId, "üì® –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...");

        try {
            byte[] photoBytes = downloadPhotoFromTelegram(fileId);

            String apiUrl = currentMode == DetectionMode.CAT_DOG
                    ? config.catAndDogDetectionUrl()
                    : config.yoloDetectionUrl();

            String response = sendPhotoToApi(photoBytes, apiUrl);

            System.out.println("Raw API response: " + response);
            String formattedResponse = currentMode == DetectionMode.CAT_DOG
                    ? formatCatDogResponse(response)
                    : formatYoloResponse(response);

            // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            sendMessage(chatId, formattedResponse);
        } catch (Exception e) {
            sendErrorMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: " + e.getMessage());
        }
    }

    private byte[] downloadPhotoFromTelegram(String fileId) throws TelegramApiException {
        org.telegram.telegrambots.meta.api.objects.File file = execute(new GetFile(fileId));
        String fileUrl = "https://api.telegram.org/file/bot" + getBotToken() + "/" + file.getFilePath();

        try {
            return restTemplate.getForObject(fileUrl, byte[].class);
        } catch (Exception e) {
            throw new TelegramApiException("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ", e);
        }
    }

    private String formatResponse(String apiResponse, DetectionMode mode) {
        if (mode == DetectionMode.CAT_DOG) {
            return "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n" + apiResponse;
        } else {
            return "YOLO –¥–µ—Ç–µ–∫—Ü–∏—è:\n" + apiResponse;
        }
    }

    private void sendModeSelectionKeyboard(long chatId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üê±üê∂ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—à–∫—É/—Å–æ–±–∞–∫—É");
        row1.add("üñº YOLO –∞–Ω–∞–ª–∏–∑");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üí¨ –ß–∞—Ç —Å Llama 4");  // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

        keyboard.add(row1);
        keyboard.add(row2);
        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        message.setReplyMarkup(keyboardMarkup);
        execute(message);
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        execute(message);
    }

    private void sendErrorMessage(long chatId, String errorText) {
        try {
            sendMessage(chatId, "‚ö†Ô∏è " + errorText);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}