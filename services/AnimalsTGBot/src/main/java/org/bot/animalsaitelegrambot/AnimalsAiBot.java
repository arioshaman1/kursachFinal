package org.bot.animalsaitelegrambot;

import org.bot.animalsaitelegrambot.config.BotConfig;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.springframework.core.io.ByteArrayResource;

import java.util.*;

import static java.util.Map.entry;

@Component
public class AnimalsAiBot extends TelegramLongPollingBot {

    private enum DetectionMode {
        CAT_DOG, YOLO, LLAMA, MOBILENET
    }

    private final BotConfig config;
    private final RestTemplate restTemplate;
    private DetectionMode currentMode;

    public AnimalsAiBot(BotConfig config, RestTemplate restTemplate) {
        super(config.getToken());
        this.config = config;
        this.restTemplate = restTemplate;
    }

    @Override
    public String getBotUsername() {
        return config.getName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                if (update.getMessage().hasText()) {
                    handleTextMessage(update); // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
                } else if (update.getMessage().hasPhoto()) {
                    handlePhotoMessage(update); // –§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
                }
            }
        } catch (Exception e) {
            sendErrorMessage(update.getMessage().getChatId(), "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    private void handleTextMessage(Update update) throws TelegramApiException {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        if (messageText.equals("/start")) {
            sendModeSelectionKeyboard(chatId);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ");
        }
    }

    private void handlePhotoMessage(Update update) throws TelegramApiException {
        long chatId = update.getMessage().getChatId();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
            if (update.getMessage().getPhoto().isEmpty()) {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑.");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            String fileId = update.getMessage().getPhoto()
                    .stream()
                    .max(Comparator.comparing(PhotoSize::getFileSize))
                    .orElseThrow()
                    .getFileId();

            sendMessage(chatId, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...");

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            byte[] photoBytes = downloadPhotoFromTelegram(fileId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if (photoBytes == null || photoBytes.length == 0) {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–∏—Å
            String apiUrl = "http://localhost:8080/api/mobilenet/upload";
            String response = sendPhotoToApi(photoBytes, apiUrl);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            String formattedResponse = formatAnimalResponse(response);
            sendMessage(chatId, formattedResponse);

        } catch (Exception e) {
            sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            e.printStackTrace(); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
    }

    private String formatAnimalResponse(String jsonResponse) {
        try {
            JSONObject json = new JSONObject(jsonResponse);
            JSONObject topPred = json.getJSONObject("top_prediction");

            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            String animalName = translateAnimalName(topPred.getString("label"));
            int confidence = (int)(topPred.getDouble("confidence") * 100);

            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            StringBuilder result = new StringBuilder();
            result.append("üñº –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n")
                    .append("–ù–∞ —Ñ–æ—Ç–æ: *").append(animalName).append("*\n")
                    .append("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ").append(confidence).append("%\n\n");

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            result.append(getAnimalEmoji(animalName)).append("\n\n");

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
            result.append(getAnimalFact(animalName));

            return result.toString();

        } catch (Exception e) {
            return "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + jsonResponse;
        }
    }

    private String translateAnimalName(String englishName) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        String cleanName = englishName.replaceAll("^n\\d+_", "").replace("_", " ");

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        Map<String, String> specialCases = Map.of(
                "giant panda", "–±–æ–ª—å—à–∞—è –ø–∞–Ω–¥–∞",
                "Arctic fox", "–ø–µ—Å–µ—Ü",
                "Great Pyrenees", "–ø–∏—Ä–µ–Ω–µ–π—Å–∫–∞—è –≥–æ—Ä–Ω–∞—è —Å–æ–±–∞–∫–∞",
                "malamute", "–º–∞–ª–∞–º—É—Ç",
                "hog", "–∫–∞–±–∞–Ω"
        );

        return specialCases.getOrDefault(cleanName, cleanName);
    }

    private String getAnimalEmoji(String animalName) {
        return switch (animalName.toLowerCase()) {
            case "–±–æ–ª—å—à–∞—è –ø–∞–Ω–¥–∞", "–ø–∞–Ω–¥–∞" -> "üêº –ü–∞–Ω–¥—ã - —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –±–∞–º–±—É–∫–æ–º!";
            case "–ø–µ—Å–µ—Ü" -> "ü¶ä –ü–µ—Å–µ—Ü - –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π –ª–∏—Å —Å –∫—Ä–∞—Å–∏–≤—ã–º –±–µ–ª—ã–º –º–µ—Ö–æ–º!";
            case "–∫–∞–±–∞–Ω" -> "üêó –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –∫–∞–±–∞–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏!";
            case "–ø–∏—Ä–µ–Ω–µ–π—Å–∫–∞—è –≥–æ—Ä–Ω–∞—è —Å–æ–±–∞–∫–∞", "–º–∞–ª–∞–º—É—Ç" -> "üê∂ –≠—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è –∏ –∫—Ä—É–ø–Ω–∞—è –ø–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫!";
            default -> "‚ÑπÔ∏è –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –º–∏—Ä–∞!";
        };
    }

    private String getAnimalFact(String animalName) {
        return switch (animalName.toLowerCase()) {
            case "–±–æ–ª—å—à–∞—è –ø–∞–Ω–¥–∞", "–ø–∞–Ω–¥–∞" ->
                    "üìå *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:* –ë–æ–ª—å—à–∏–µ –ø–∞–Ω–¥—ã –ø—Ä–æ–≤–æ–¥—è—Ç –¥–æ 12 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ –µ–¥–æ–π, —Å—ä–µ–¥–∞—è –¥–æ 15% –æ—Ç —Å–≤–æ–µ–≥–æ –≤–µ—Å–∞ –≤ –±–∞–º–±—É–∫–µ!";
            case "–ø–µ—Å–µ—Ü" ->
                    "üìå *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:* –ü–µ—Å—Ü—ã –º–æ–≥—É—Ç –≤—ã–∂–∏–≤–∞—Ç—å –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –¥–æ -50¬∞C –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–º—É –≥—É—Å—Ç–æ–º—É –º–µ—Ö—É!";
            case "–∫–∞–±–∞–Ω" ->
                    "üìå *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:* –ö–∞–±–∞–Ω—ã –æ–±–ª–∞–¥–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–º –æ–±–æ–Ω—è–Ω–∏–µ–º –∏ –º–æ–≥—É—Ç —É—á—É—è—Ç—å –ø–∏—â—É –ø–æ–¥ –∑–µ–º–ª–µ–π!";
            default ->
                    "üîç –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ!";
        };
    }
    private String askLlama(String userMessage, long chatId) {
        try {
            String apiUrl = config.llamaApiUrl();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

            // –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
            JSONObject requestBody = new JSONObject();
            requestBody.put("message", userMessage);
            requestBody.put("chat_id", chatId);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
            HttpEntity<String> request = new HttpEntity<>(requestBody.toString(), headers);
            ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            JSONObject jsonResponse = new JSONObject(response.getBody());
            if (jsonResponse.getString("status").equals("success")) {
                return jsonResponse.getString("response");
            } else {
                return "–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: " + jsonResponse.optString("error", "Unknown error");
            }

        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: " + e.getMessage();
        }
    }
    private String formatYoloResponse(String jsonResponse) {
        try {
            JSONObject json = new JSONObject(jsonResponse);
            StringBuilder result = new StringBuilder("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–∞ detections
            if (json.has("detections")) {
                JSONArray detections = json.getJSONArray("detections");

                if (detections.length() == 0) {
                    return result.append("‚ÑπÔ∏è –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤\n")
                            .append("–§–∞–π–ª: ").append(json.optString("filename", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
                            .append("\n–¢–∏–ø: ").append(json.optString("media_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
                            .toString();
                }

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                Map<String, Integer> objectCounts = new HashMap<>();
                for (int i = 0; i < detections.length(); i++) {
                    JSONObject det = detections.getJSONObject(i);
                    String objClass = det.optString("class", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç");
                    objectCounts.put(objClass, objectCounts.getOrDefault(objClass, 0) + 1);
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
                result.append("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ").append(detections.length()).append("\n\n")
                        .append("–°–æ—Å—Ç–∞–≤ –æ–±—ä–µ–∫—Ç–æ–≤:\n");

                objectCounts.forEach((cls, count) ->
                        result.append("‚Ä¢ ").append(cls).append(": ").append(count).append("\n"));

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
                result.append("\nüîé –î–µ—Ç–∞–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:\n");
                for (int i = 0; i < detections.length(); i++) {
                    JSONObject det = detections.getJSONObject(i);
                    result.append("\n").append(i+1).append(". ")
                            .append(det.optString("class", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç")).append("\n")
                            .append("   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ")
                            .append(String.format("%.1f", det.optDouble("confidence", 0)*100))
                            .append("%\n");

                    if (det.has("bbox")) {
                        JSONObject bbox = det.getJSONObject("bbox");
                        result.append("   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [")
                                .append(String.format("%.0f", bbox.optDouble("x1", 0))).append(",")
                                .append(String.format("%.0f", bbox.optDouble("y1", 0))).append("]-[")
                                .append(String.format("%.0f", bbox.optDouble("x2", 0))).append(",")
                                .append(String.format("%.0f", bbox.optDouble("y2", 0))).append("]\n")
                                .append("   –†–∞–∑–º–µ—Ä: ")
                                .append(String.format("%.0f", bbox.optDouble("x2", 0)-bbox.optDouble("x1", 0)))
                                .append("x")
                                .append(String.format("%.0f", bbox.optDouble("y2", 0)-bbox.optDouble("y1", 0)));
                    }
                }

                return result.toString();
            }

            return result.append("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è—Ö\n")
                    .append("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n")
                    .append(json.toString(2))
                    .toString();

        } catch (Exception e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage()
                    + "\n\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n"
                    + jsonResponse;
        }
    }
    private String sendPhotoToApi(byte[] photoBytes, String apiUrl) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            ByteArrayResource resource = new ByteArrayResource(photoBytes) {
                @Override
                public String getFilename() {
                    return "animal_photo.jpg";
                }
            };

            // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", resource);

            HttpEntity<MultiValueMap<String, Object>> requestEntity =
                    new HttpEntity<>(body, headers);

            // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            ResponseEntity<String> response = restTemplate.postForEntity(
                    apiUrl,
                    requestEntity,
                    String.class
            );

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            if (response.getStatusCode() != HttpStatus.OK) {
                throw new RuntimeException("API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: " + response.getStatusCode());
            }

            return response.getBody();

        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –Ω–∞ API: " + e.getMessage(), e);
        }
    }
    private String formatCatDogResponse(String jsonResponse) {
        try {
            JSONObject json = new JSONObject(jsonResponse);
            StringBuilder result = new StringBuilder("üêæ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n\n");

            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (label + probability)
            if (json.has("label") && json.has("probability")) {
                String label = json.getString("label");
                double probability = json.getDouble("probability") * 100;

                String emoji = label.equalsIgnoreCase("cat") ? "üê±" : "üê∂";
                String animalName = label.equalsIgnoreCase("cat") ? "–∫–æ—à–∫–∞" : "—Å–æ–±–∞–∫–∞";

                result.append("–ñ–∏–≤–æ—Ç–Ω–æ–µ: ").append(animalName).append(" ").append(emoji).append("\n")
                        .append("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ").append(String.format("%.1f", probability)).append("%");

                return result.toString();
            }
            // –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (class + confidence)
            else if (json.has("class") && json.has("confidence")) {
                String animalClass = json.getString("class");
                double confidence = json.getDouble("confidence") * 100;

                return String.format(
                        "–ñ–∏–≤–æ—Ç–Ω–æ–µ: %s\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.1f%%",
                        animalClass.equals("cat") ? "–∫–æ—à–∫–∞ üê±" : "—Å–æ–±–∞–∫–∞ üê∂",
                        confidence
                );
            }
            else if (json.has("prediction")) {
                return "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + json.getString("prediction");
            }
            else {
                return "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n"
                        + "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + json.toString();
            }

        } catch (Exception e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n"
                    + e.getMessage()
                    + "\n\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n"
                    + jsonResponse;
        }
    }
    private String formatMobileNetResponse(String jsonResponse) {
        try {
            JSONObject json = new JSONObject(jsonResponse);
            StringBuilder result = new StringBuilder("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n");

            JSONArray predictions = json.getJSONArray("predictions");
            JSONObject topPrediction = json.getJSONObject("top_prediction");

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            List<JSONObject> animalPredictions = new ArrayList<>();
            for (int i = 0; i < predictions.length(); i++) {
                JSONObject pred = predictions.getJSONObject(i);
                if (isRelevantAnimal(pred.getString("label")) && pred.getDouble("confidence") > 0.05) {
                    animalPredictions.add(pred);
                }
            }

            if (animalPredictions.isEmpty()) {
                // –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö
                return result.append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ —Ñ–æ—Ç–æ\n")
                        .append("–°–µ—Ä–≤–∏—Å —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n")
                        .append(topPrediction.getString("label"))
                        .append(" (")
                        .append(String.format("%.1f", topPrediction.getDouble("confidence") * 100))
                        .append("%)")
                        .toString();
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            animalPredictions.sort((a, b) -> Double.compare(b.getDouble("confidence"), a.getDouble("confidence")));

            // –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result.append("–ù–∞ —Ñ–æ—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ:\n");
            for (int i = 0; i < Math.min(3, animalPredictions.size()); i++) {
                JSONObject pred = animalPredictions.get(i);
                String label = translateAnimalName(pred.getString("label"));
                result.append("\n")
                        .append(i + 1).append(". ")
                        .append(getAnimalEmoji(label)).append(" ")
                        .append(label).append(" - ")
                        .append(String.format("%.1f", pred.getDouble("confidence") * 100))
                        .append("%");
            }

            return result.toString();

        } catch (Exception e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.\n" +
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: " + e.getMessage();
        }
    }

    private boolean isRelevantAnimal(String label) {
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        String lowerLabel = label.toLowerCase();
        return !lowerLabel.contains("_") &&  // –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                !lowerLabel.contains(" ") &&
                !lowerLabel.equals("dog") &&
                !lowerLabel.equals("cat") &&
                !lowerLabel.equals("chihuahua") &&
                !lowerLabel.equals("terrier") &&
                !lowerLabel.matches(".*(curtain|screen|furniture|device|tool).*");
    }

    private HttpEntity<MultiValueMap<String, Object>> createRequestWithPhoto(byte[] photoBytes) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        ByteArrayResource fileAsResource = new ByteArrayResource(photoBytes) {
            @Override
            public String getFilename() {
                return "telegram_photo.jpg";
            }
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", fileAsResource);

        return new HttpEntity<>(body, headers);
    }
    private byte[] downloadPhotoFromTelegram(String fileId) throws TelegramApiException {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            org.telegram.telegrambots.meta.api.objects.File file = execute(new GetFile(fileId));

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            String fileUrl = "https://api.telegram.org/file/bot" + getBotToken() + "/" + file.getFilePath();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            ResponseEntity<byte[]> response = restTemplate.exchange(
                    fileUrl,
                    HttpMethod.GET,
                    null,
                    byte[].class
            );

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                return response.getBody();
            } else {
                throw new TelegramApiException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: " + response.getStatusCode());
            }
        } catch (RestClientException e) {
            throw new TelegramApiException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: " + e.getMessage(), e);
        }
    }

    private String formatResponse(String apiResponse, DetectionMode mode) {
        if (mode == DetectionMode.CAT_DOG) {
            return "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n" + apiResponse;
        } else {
            return "YOLO –¥–µ—Ç–µ–∫—Ü–∏—è:\n" + apiResponse;
        }
    }

    private void sendModeSelectionKeyboard(long chatId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üê±üê∂ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—à–∫—É/—Å–æ–±–∞–∫—É");
        row1.add("üñº YOLO –∞–Ω–∞–ª–∏–∑");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üì± –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö");  // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        row2.add("üí¨ –ß–∞—Ç —Å Llama 4");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        message.setReplyMarkup(keyboardMarkup);
        execute(message);
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        execute(message);
    }

    private void sendErrorMessage(long chatId, String errorText) {
        try {
            sendMessage(chatId, "‚ö†Ô∏è " + errorText);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}